AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notification-app

  SAM Template for a notification app with DynamoDB and SNS integration

Globals:
  Function:
    Timeout: 30

Resources:
  # DynamoDB Table for storing announcements
  AnnouncementsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AnnouncementsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic for sending notifications
  AnnouncementsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AnnouncementsTopic

  # Cognito User Pool for authentication
  AnnouncementsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "NotificationsAppUserPool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireUppercase: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  # Cognito User Pool Client for frontend authentication
  AnnouncementsUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AnnouncementsUserPool
      ClientName: "NotificationsAppClient"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH  # Allow SRP auth for better security
        - ALLOW_REFRESH_TOKEN_AUTH

  # Lambda function for handling API requests
  AnnouncementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: announcements.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref AnnouncementsTable
          SNS_TOPIC_ARN: !Ref AnnouncementsSNSTopic
          COGNITO_USER_POOL_ID: !Ref AnnouncementsUserPool
          AWS_COGNITO_REGION: !Ref AWS::Region
      Events:
        AnnouncementsApi:
          Type: Api
          Properties:
            Path: /announcements
            Method: any  # Supports GET, POST, etc.
            RestApiId: !Ref MyApi  # Attach to the custom API Gateway
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "sns:Publish"
            Resource: !Ref AnnouncementsSNSTopic
        - Statement:
            Effect: Allow
            Action:
              - "secretsmanager:GetSecretValue"
            Resource: "*"

  # API Gateway with Cognito Authorizer
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"  # Allow CORS from any origin
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AnnouncementsUserPool.Arn

Outputs:
  # Output for the API Gateway endpoint
  AnnouncementsApiUrl:
    Description: "API Gateway endpoint URL for Announcements function"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/announcements/"

  # Output for the Lambda Function ARN
  AnnouncementsFunctionArn:
    Description: "Announcements Lambda Function ARN"
    Value: !GetAtt AnnouncementsFunction.Arn

  # Output for the IAM Role of the Lambda function
  AnnouncementsFunctionIamRole:
    Description: "IAM Role created for Announcements function"
    Value: !GetAtt AnnouncementsFunctionRole.Arn

  # Output for the Cognito User Pool and Client
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref AnnouncementsUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref AnnouncementsUserPoolClient
