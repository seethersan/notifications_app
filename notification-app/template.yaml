AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  notification-app

  SAM Template for a notification app with DynamoDB, SNS, and Cognito User Pool integration

Parameters:
  CognitoUserPoolDomainName:
    Type: String
    Description: The domain name for the Cognito User Pool
  FrontendURL:
    Type: String
    Description: The URL of the frontend (e.g., CloudFront distribution)

Globals:
  Function:
    Timeout: 30

Resources:
  # DynamoDB Table for storing announcements
  AnnouncementsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: AnnouncementsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic for sending notifications
  AnnouncementsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AnnouncementsTopic

  # Cognito User Pool for authentication
  AnnouncementsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "NotificationsAppUserPool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireUppercase: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  # Cognito User Pool Client for frontend authentication
  AnnouncementsUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AnnouncementsUserPool
      ClientName: "NotificationsAppClient"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  AnnouncementsUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref AnnouncementsUserPool
      Domain: !Ref CognitoUserPoolDomainName

  # Lambda function for handling API requests
  AnnouncementsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: announcements.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref AnnouncementsTable
          SNS_TOPIC_ARN: !Ref AnnouncementsSNSTopic
          COGNITO_USER_POOL_ID: !Ref AnnouncementsUserPool
          AWS_COGNITO_REGION: !Ref AWS::Region
      Events:
        # GET method with Cognito Authorizer
        AnnouncementsApiGet:
          Type: Api
          Properties:
            Path: /announcements
            Method: get
            RestApiId: !Ref AnnouncementsAPI
            Auth:
              Authorizer: CognitoAuthorizer

        # POST method with Cognito Authorizer
        AnnouncementsApiPost:
          Type: Api
          Properties:
            Path: /announcements
            Method: post
            RestApiId: !Ref AnnouncementsAPI
            Auth:
              Authorizer: CognitoAuthorizer

      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - AWSLambdaBasicExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:GetItem"
              - "dynamodb:Scan"
            Resource: !GetAtt AnnouncementsTable.Arn
        - Statement:
            Effect: Allow
            Action:
              - "sns:Publish"
            Resource: !Ref AnnouncementsSNSTopic

  # API Gateway with Cognito Authorizer and CORS Configuration
  AnnouncementsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,Access-Control-Allow-Origin'"
        AllowOrigin: !Sub "'${FrontendURL}'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt AnnouncementsUserPool.Arn

Outputs:
  # Output for the API Gateway endpoint
  AnnouncementsApiUrl:
    Description: "API Gateway endpoint URL for Announcements function"
    Value: !Sub "https://${AnnouncementsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/announcements/"

  # Output for the Lambda Function ARN
  AnnouncementsFunctionArn:
    Description: "Announcements Lambda Function ARN"
    Value: !GetAtt AnnouncementsFunction.Arn

  # Output for the IAM Role of the Lambda function
  AnnouncementsFunctionIamRole:
    Description: "IAM Role created for Announcements function"
    Value: !GetAtt AnnouncementsFunctionRole.Arn

  # Output for the Cognito User Pool and Client
  CognitoUserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref AnnouncementsUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref AnnouncementsUserPoolClient

  CognitoUserPoolURL:
    Description: "URI to be used to set up external federated IDPs"
    Value: !Sub "https://${CognitoUserPoolDomainName}.auth.${AWS::Region}.amazoncognito.com"
