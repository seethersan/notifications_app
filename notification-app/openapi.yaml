openapi: 3.0.0
info:
  version: 1.0.0
  title: Notification App API
  description: API for managing announcements.
  contact:
    name: Juan Carlos Espinoza Zurita

tags:
  - name: Announcements
    description: Endpoints for managing announcements

servers:
  - url: https://{api_id}.execute-api.{region}.amazonaws.com/Prod
    description: Production
    variables:
      api_id:
        default: x1orn0jhw1
      region:
        default: us-east-1

security:
  - jwt: []

x-amazon-apigateway-request-validators:
  Validate body, query string parameters, and headers:
    validateRequestParameters: true
    validateRequestBody: true

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/json: '{ "message": "Unauthorized" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: '{ "message": "Access Denied" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"

paths:
  /announcements:
    options:
      summary: CORS preflight
      description: Handles preflight CORS requests.
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,Access-Control-Allow-Origin'"
    get:
      summary: Get announcements
      operationId: getAnnouncements
      tags:
        - Announcements
      description: Retrieve a list of announcements.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    description:
                      type: string
                    releaseDate:
                      type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/accessDenied'
        '500':
          $ref: '#/components/responses/unexpectedError'
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnnouncementsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    post:
      summary: Create a new announcement
      operationId: createAnnouncement
      tags:
        - Announcements
      description: Add a new announcement to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - releaseDate
              properties:
                title:
                  type: string
                description:
                  type: string
                releaseDate:
                  type: string
      responses:
        '201':
          description: Successfully created announcement
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  announcement:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      releaseDate:
                        type: string
        '400':
          $ref: '#/components/responses/badRequest'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/accessDenied'
        '500':
          $ref: '#/components/responses/unexpectedError'
      x-amazon-apigateway-request-validator: Validate body, query string parameters, and headers
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AnnouncementsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

components:
  responses:
    unexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Something went wrong!
    badRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Unauthorized
    accessDenied:
      description: Access Denied
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: Access Denied

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
